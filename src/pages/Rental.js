import React, { useState, useEffect } from "react";
import { AiOutlineEye, AiOutlineDelete } from "react-icons/ai";
import { FaRegCalendarAlt, FaCar, FaUser, FaMoneyBillWave, FaClipboardList } from "react-icons/fa";
import { toast } from "react-toastify";
import { fetchRentals, deleteRental } from "../services/rentalService";

const Rentals = () => {
  const [rentals, setRentals] = useState([]);
  const [rentalToView, setRentalToView] = useState(null); // State ƒë·ªÉ l∆∞u h·ª£p ƒë·ªìng khi xem
  const [rentalToDelete, setRentalToDelete] = useState(null); // State ƒë·ªÉ l∆∞u h·ª£p ƒë·ªìng khi x√≥a
  const [showViewModal, setShowViewModal] = useState(false); // State ƒë·ªÉ m·ªü modal xem
  const [showDeleteModal, setShowDeleteModal] = useState(false); // State ƒë·ªÉ m·ªü modal x√≥a

  useEffect(() => {
    const getRentals = async () => {
      try {
        const data = await fetchRentals();
        setRentals(data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu h·ª£p ƒë·ªìng:", error);
        toast.error("L·ªói khi l·∫•y d·ªØ li·ªáu h·ª£p ƒë·ªìng");
      }
    };

    getRentals();
  }, []);

  // H√†m format gi√° tr·ªã ng√†y th√°ng v√† s·ªë
  const formatValue = (value) => {
    if (value && value instanceof Date && !isNaN(value)) {
      return value.toLocaleDateString('vi-VN'); // Format ng√†y th√°ng
    } else if (typeof value === 'number') {
      return value.toLocaleString('vi-VN'); // Format s·ªë
    }
    return value || "N/A"; // Tr·∫£ v·ªÅ "N/A" n·∫øu kh√¥ng c√≥ gi√° tr·ªã
  };

  // Handle delete rental
  const handleDelete = async () => {
    try {
      await deleteRental(rentalToDelete._id);
      setRentals(rentals.filter(rental => rental._id !== rentalToDelete._id)); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch h·ª£p ƒë·ªìng
      toast.success("X√≥a h·ª£p ƒë·ªìng th√†nh c√¥ng!");
      setShowDeleteModal(false); // ƒê√≥ng modal sau khi x√≥a th√†nh c√¥ng
    } catch (error) {
      console.error("L·ªói khi x√≥a h·ª£p ƒë·ªìng:", error);
      toast.error("L·ªói khi x√≥a h·ª£p ƒë·ªìng");
      setShowDeleteModal(false); // ƒê√≥ng modal n·∫øu c√≥ l·ªói
    }
  };

  // Open view modal
  const openViewModal = (rental) => {
    setRentalToView(rental);  // L∆∞u rental c·∫ßn xem
    setShowViewModal(true); // M·ªü modal xem
  };

  // Open delete modal
  const openDeleteModal = (rental) => {
    setRentalToDelete(rental);  // L∆∞u h·ª£p ƒë·ªìng c·∫ßn x√≥a
    setShowDeleteModal(true); // M·ªü modal x√≥a
  };

  // Function to get the background color based on the rental status
  const getStatusColor = (status) => {
    switch (status) {
      case 'Ch·ªù duy·ªát':
        return 'bg-warning'; // Yellow for 'Ch·ªù duy·ªát'
      case 'ƒêang thu√™':
        return 'bg-primary'; // Blue for 'ƒêang thu√™'
      case 'Ho√†n th√†nh':
        return 'bg-success'; // Success for 'Ho√†n th√†nh'
      default:
        return 'bg-danger'; // M·∫∑c ƒë·ªãnh cho ƒë√£ hu·ª∑
    }
  };

  return (
    <div className="card shadow-sm p-3">
      <h4 className="fw-bold">üöó DANH S√ÅCH H·ª¢P ƒê·ªíNG</h4>
      <table className="table table-striped table-bordered table-hover">
        <thead className="table-primary text-center">
          <tr>
            <th><FaCar /> T√™n Xe</th>
            <th><FaUser /> T√™n Kh√°ch h√†ng</th>
            <th><FaRegCalendarAlt /> Ng√†y b·∫Øt ƒë·∫ßu</th>
            <th><FaRegCalendarAlt /> Ng√†y k·∫øt th√∫c</th>
            <th><FaMoneyBillWave /> T·ªïng chi ph√≠ (VNƒê)</th>
            <th><FaClipboardList /> Tr·∫°ng th√°i</th>
            <th>H√ÄNH ƒê·ªòNG</th>
          </tr>
        </thead>
        <tbody>
          {rentals.map((rental, rowIndex) => (
            <tr key={rowIndex}>
              <td>{rental.carInfo || "N/A"}</td>
              <td>{rental.customerInfo || "N/A"}</td>
              <td>{formatValue(new Date(rental.start_date))}</td>
              <td>{formatValue(new Date(rental.end_date))}</td>
              <td>{formatValue(rental.total_cost)}</td>
              <td className={`text-center ${getStatusColor(rental.status)}`}>
                {rental.status || "N/A"}
              </td>
              <td className="text-center">
                <button className="btn btn-outline-primary btn-sm" onClick={() => openViewModal(rental)}>
                  <AiOutlineEye /> Xem
                </button>
                <button
                  className="btn btn-outline-danger btn-sm ms-2"
                  onClick={() => openDeleteModal(rental)}
                >
                  <AiOutlineDelete /> X√≥a
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Modal for viewing rental details */}
      {showViewModal && (
        <div className="modal fade show" style={{ display: 'block', backgroundColor: 'rgba(0, 0, 0, 0.5)' }} id="viewModal" tabIndex="-1" aria-labelledby="viewModalLabel" aria-hidden="true">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content" style={{ borderRadius: '10px', boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)' }}>
              <div className="modal-header">
                <h5 className="modal-title" id="viewModalLabel">Chi ti·∫øt h·ª£p ƒë·ªìng thu√™ xe</h5>
                <button type="button" className="btn-close" aria-label="Close" onClick={() => setShowViewModal(false)}></button>
              </div>
              <div className="modal-body">
                {rentalToView ? (
                  <div className="table-responsive">
                    <table className="table table-bordered">
                      <tbody>
                        <tr style={{ backgroundColor: '#f9f9f9' }}>
                          <td><strong>T√™n Xe</strong></td>
                          <td>{rentalToView.carInfo}</td>
                        </tr>
                        <tr>
                          <td><strong>T√™n Kh√°ch H√†ng</strong></td>
                          <td>{rentalToView.customerInfo}</td>
                        </tr>
                        <tr style={{ backgroundColor: '#f9f9f9' }}>
                          <td><strong>Ng√†y b·∫Øt ƒë·∫ßu:</strong></td>
                          <td>{formatValue(new Date(rentalToView.start_date))}</td>
                        </tr>
                        <tr>
                          <td><strong>Ng√†y k·∫øt th√∫c:</strong></td>
                          <td>{formatValue(new Date(rentalToView.end_date))}</td>
                        </tr>
                        <tr style={{ backgroundColor: '#f9f9f9' }}>
                          <td><strong>T·ªïng chi ph√≠:</strong></td>
                          <td>{formatValue(rentalToView.total_cost)}</td>
                        </tr>
                        <tr>
                          <td><strong>Tr·∫°ng th√°i:</strong></td>
                          <td>{rentalToView.status}</td>
                        </tr>
                      </tbody>
                    </table>
                    <hr style={{ width: '80%', margin: '0 auto' }} />
                  </div>
                ) : (
                  <p>Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p ƒë·ªìng.</p>
                )}
              </div>
              <div className="modal-footer">

                <button type="button" className="btn btn-secondary" onClick={() => setShowViewModal(false)}>ƒê√≥ng</button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Modal for delete confirmation */}
      {showDeleteModal && (
        <div className="modal fade show" style={{ display: 'block', backgroundColor: 'rgba(0, 0, 0, 0.5)' }} id="deleteModal" tabIndex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
          <div className="modal-dialog modal-dialog-centered">
            <div className="modal-content" style={{ borderRadius: '10px', boxShadow: '0 0 10px rgba(0, 0, 0, 0.1)' }}>
              <div className="modal-header">
                <h5 className="modal-title" id="deleteModalLabel">X√°c nh·∫≠n x√≥a h·ª£p ƒë·ªìng</h5>
                <button type="button" className="btn-close" aria-label="Close" onClick={() => setShowDeleteModal(false)}></button>
              </div>
              <div className="modal-body">
                <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ª£p ƒë·ªìng n√†y?</p>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary" onClick={() => setShowDeleteModal(false)}>H·ªßy</button>
                <button type="button" className="btn btn-danger" onClick={handleDelete}>X√≥a</button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Rentals;
